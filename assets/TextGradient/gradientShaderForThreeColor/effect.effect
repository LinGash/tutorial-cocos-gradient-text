CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        color1: { value: [1.0, 1.0, 1.0, 1.0], editor: {type: color} }
        color2: { value: [1.0, 1.0, 1.0, 1.0], editor: {type: color} }
        color3: { value: [1.0, 1.0, 1.0, 1.0], editor: {type: color} }
        colorRadio: { value: 0.5}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  uniform Constant{
    vec4 color1;
    vec4 color2;
    vec4 color3;
  };   

  in vec2 uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;

  uniform ARGS{
    float colorRadio;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1); 
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); 

    o.rgb *= mix(color1.rgb, mix(color2.rgb, color3.rgb, smoothstep(0.0, colorRadio * 2.0, uv0.x)), smoothstep(0.0, colorRadio * 1.0, uv0.x));

    o *= color;

    ALPHA_TEST(o);
    return o;
  }
}%